{"ts":1349383829121,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// server.js\r\n\r\nvar url = require('url'),\r\n    http = require('http');\r\n\r\nhttp.createServer(function (req, res) {\r\n\tconsole.log('Path: ' + url.parse(req.url).path);\r\n\tif (url.parse(req.url).pathname.toLowerCase() != '/jsonp') {\r\n\t\tres.writeHead(404);\r\n\t\tres.end();\r\n\t} else {\r\n\t\tres.writeHead(200, {'Content-Type': 'application/javascript'});\r\n\t\tvar options = url.parse(unescape(url.parse(req.url, true).query.url)); // parse url query string\r\n\r\n\r\n\t\tres.write(unescape(url.parse(req.url, true).query.callback) + '(' + JSON.stringify(options) + ','); // callback\r\n\r\n\t\thttp.get(options, function (getres) { //{host: options.host, path: options.path}\r\n\t\t\tres.write('\"' + getres.statusCode + '\",' + JSON.stringify(getres.headers) + ',\"');\r\n\t\t\tgetres.setEncoding('utf8');\r\n\t\t\tgetres.on('data', function (chunk) {\r\n\t\t\t\tres.write(escape(chunk));\r\n\t\t\t});\r\n\t\t\tgetres.on('end', function () {\r\n\t\t\t\tres.end('\");');\r\n\t\t\t});\r\n\t\t}).on('error', function (e) {\r\n\t\t\tconsole.log(\"Error in http.get: \" + e.message);\r\n\t\t});\r\n\t}\r\n\r\n}).listen(80);\r\nconsole.log('Server running.');\r\n"]],"start1":0,"start2":0,"length1":0,"length2":1059}]],"length":1059}
